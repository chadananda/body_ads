<?php
// $Id: ba.module,v 1.26 2008/01/19 21:13:58 chadj Exp $

/**
 * @file 
 *
 */


/**
 * Implementation of hook_node_info(). This function replaces hook_node_name()
 * and hook_node_types() from 4.6. Drupal 5 expands this hook significantly.
 
 * 
 */
function ba_node_info() {
  return array(
    'ba' => array(
      'name' => t('Bulk Article'),
      'module' => 'ba',
      'description' => t("This is an bulk syndicated article node."),
      'has_title' => TRUE,
      'title_label' => t('Article Title'),
      'has_body' => TRUE,
      'body_label' => t('Article Body'),
    )
  );
} 

/**
 * Implementation of hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function ba_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create article content', $account);
  } 
  if ($op == 'update') {
    if (user_access('edit any article content', $account) || (user_access('edit own article content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  } 
  if ($op == 'delete') {
    if (user_access('delete any article content', $account) || (user_access('delete own article content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function ba_perm() {
  return array(
    'create article content',
    'delete own article content',
    'delete any article content',
    'edit own article content',
    'edit any article content',
  );
}

/**
 * Implementation of hook_manu().
 *
 * Provide a settings tab and a "to promote" que
 */
/**
 * Implementation of hook_menu()
 */
function ba_menu() {
  $items = array(); 

  $items['admin/settings/ba'] = array(
    'title' => t('Bulk Articles'),
    'description' => t('Bulk Article Manager'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ba_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/settings/ba/settings'] = array(
    'title' => t('Article Settings'),
    'description' => t('Bulk Articles Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ba_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
     'type'     => MENU_LOCAL_TASK,
     'weight' => -10,
  );

  $items['admin/settings/ba/urls'] = array(
    'title' => t('Que New Articles'),
    'description' => t('Add new articles to Que'),
    'page callback' => 'ba_get_article_urls_batch',
   // 'page arguments' => array('ba_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
     'type'     => MENU_LOCAL_TASK,
     'weight' => -5,
  );
 
  $items['admin/settings/ba/que'] = array(
    'title' => "Process Que",
    'description' => t('Fetch articles from Que'),
    'page callback' => 'ba_process_que_batch',
    // 'page arguments' => array('ba_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type'     => MENU_LOCAL_TASK,
    'weight' => -2,
  );
  return $items;
}

function ba_cron() {
 // _ba_check_rss(); 
 _ba_publish_articles_cron();
 if (variable_get('ba_import_cron', FALSE)) _ba_process_que_cron();
}

function _ba_publish_articles_cron(){ 
 // first second of this month
 $from = strtotime(date("Y-m-1"));
 

 // get count of total number of articles published this month
 $sql = "SELECT COUNT(*) FROM {bulk_article} WHERE pub_date >= %d";
 $total_published = db_result(db_query($sql, $from));
 
 // today's month day, total days this month
 $total_days = cal_days_in_month(CAL_GREGORIAN, date('m'), date('Y')); // total days in this month
 $elapsed_days = date('j'); // day of this month
 $publish_rate = variable_get('ba_publish_rate', 10);
 
 // now calculate how many should have been published this month
 $total_due = round($publish_rate / $total_days * $elapsed_days);
 
 if ($total_due > $total_published) {
  // publish the difference
  $to_publish = $total_due - $total_published;
  _ba_publish_articles($to_publish); 
 } 
}

function _ba_publish_articles($count) { 
  $clear_cache = FALSE; 
  global $base_url;
  $pub = 0;
  
  // select $count unpublished nodes
  $articles = db_query("SELECT nid FROM {bulk_article} WHERE pub_date=0 LIMIT %d", $count);

  while ($ar = db_fetch_object($articles)) {
    $n = node_load($ar->nid);
    $n->pub_date = time();
    $n->changed = $n->pub_date;
    $n->created = $n->pub_date; 

    // Use the actions system to publish the node.
    // copied this from the scheduler module
    
    watchdog('bulk articles', 'Scheduled publishing of %title.', array('%title' => $n->title), WATCHDOG_NOTICE, l(t('view'), 'node/'. $n->nid));
    
    $actions = array('node_publish_action', 'node_save_action');
    $context['node'] = $n;
    actions_do($actions, $n, $context, NULL, NULL); 
    $clear_cache = TRUE;
    
    $list.= "\n". $n->title ."\n  ". $base_url .'/node/'. $n->nid ."\n";   
    $pub++;  
  }
 
  if ($clear_cache) {
    // clear the cache so an anonymous poster can see the node being published or unpublished
    cache_clear_all();
  }
  
 // send notification to bulk article administrator
 if ($pub && ($to = variable_get('ba_administrator', ''))) {
  $subject = $base_url ." - publishing {$count} bulk article(s)";
  $message = "{$base_url} site has just published {$count} bulk articles: \n {$list}";
  mail($to, $subject, $message);
 } 
}


/**
 * Admin settings form
 */
function ba_admin_settings_form() {
  $que = variable_get('bulk_article_que', array());
  if (count($que)) drupal_set_message(count($que) ." article URLs waiting in the que. ". l('Process Que', 'admin/settings/ba/que'));
  
  $pub_count = db_result(db_query("SELECT COUNT(*) FROM {bulk_article} WHERE pub_date>0"));
  $unpub_count = db_result(db_query("SELECT COUNT(*) FROM {bulk_article} WHERE pub_date=0"));  
  if ($pub_count || $unpub_count) {
   drupal_set_message("{$pub_count} bulk articles published, {$unpub_count} imported but unpublished.");
  }
  
 

  /**********************************
   *
   */
  $form['site_settings']  = array(
    '#type'         => 'fieldset',
    '#title'        => t('Site Options'),
  );
  $form['site_settings']['ba_administrator'] = array(
      '#type' => 'textfield',
      '#title' => t('Article administrator'),
      '#description' =>  t('Administrator will recieve notifications when the system needs attention.'),
      '#required' => TRUE,
      '#default_value' => variable_get('ba_administrator', variable_get('site_mail', '')),
  ); // TODO, make this a user field
  
  $form['site_settings']['ba_minimum_articles'] = array(
      '#type' => 'textfield',
      '#title' => t('Minimum bulk articles'),
      '#description' =>  t('Minimum number of articles to initially publish'),
      '#required' => FALSE,
      '#default_value' => variable_get('ba_minimum_articles', 30),
      '#cols' => '5',
  );
  $form['site_settings']['ba_publish_rate'] = array(
      '#type' => 'textfield',
      '#title' => t('Publish Rate'),
      '#description' =>  t('Number of unpublished articles to publish each month'),
      '#required' => FALSE,
      '#default_value' => variable_get('ba_publish_rate', 30),
      '#cols' => '5',
  ); 
  $form['site_settings']['ba_import_cron'] = array(
      '#type' => 'checkbox',
      '#title' => t('Import articles on Cron'),
      '#description' =>  t('Fetch one or two articles from the Process Que on each cron run'),
      '#required' => FALSE,
      '#default_value' => variable_get('ba_import_cron', FALSE), 
  );  
  
  

  $form['bulk_article_sources']  = array(
    '#type'         => 'fieldset',
    '#title'        => t('Bulk Article Sources'),
    '#collapsible'  => TRUE,
    '#collapsed'    => TRUE,
  );
  $form['bulk_article_sources']['articlebase']  = array(
    '#type'         => 'fieldset',
    '#title'        => t('Articlebase'),
    '#description'  => t('Articlebase - ') . l('http://articlebase.com/', 'http://articlebase.com/', array('target' => '_new')),
    '#collapsible'  => TRUE,
    '#collapsed'    => TRUE,
  );
  $form['bulk_article_sources']['articlebase']['ba_articlebase_rss_feed'] = array(
      '#type' => 'textfield',
      '#title' => t('RSS Feed to watch for new articlebase articles'),
      '#description' =>  t('Create an aggregated feed with ') . l('Yahoo pipes', 'http://pipes.yahoo.com/pipes/', array('target' => '_new')) ,
      '#required' => FALSE,
      '#default_value' => variable_get('ba_articlebase_rss_feed', ''),
  );
  $form['bulk_article_sources']['articlebase']['ba_articlebase_topics'] = array(
      '#type' => 'textarea',
      '#title' => t('Articlebase Topics'),
      '#description' =>  t('Keyword topics found at articlebase.com under which to search'),
      '#required' => FALSE,
      '#default_value' => variable_get('ba_articlebase_topics', "backup-software\nonline-backup\ndata-backup\ncomputer-backup\nremote-backup\nonline-backup-software\ndvd-backup\nsoftware-backup\nwindows-backup-software\ninternet-backup\noffsite-backup"),
      '#cols'  => 50,
      '#rows'  => 8,
  );
  $form['bulk_article_sources']['articlebase']['ba_articlebase_pages_to_que'] = array(
      '#type' => 'textarea',
      '#title' => t('Add ArticleBase.com Article URLs to Queue'),
      '#description' =>  t('URLs to manually add to the Queue'),
      '#required' => FALSE,
      '#default_value' => '',
      '#cols'  => 100,
      '#rows'  => 3,
  );


  
  $form['bulk_article_sources']['isnare']  = array(
    '#type'         => 'fieldset',
    '#title'        => t('Isnare'),
    '#description'        => t('Isnare - ') . l('http://isnare.com/', 'http://isnare.com/', array('target' => '_new')),
    '#collapsible'  => TRUE,
    '#collapsed'    => TRUE,
  );
  $form['bulk_article_sources']['isnare']['ba_isnare_rss_feed'] = array(
      '#type' => 'textfield',
      '#title' => t('RSS Feed to watch for new isnare articles'),
      '#description' =>  t('Create an aggregated feed with ') . l('Yahoo pipes', 'http://pipes.yahoo.com/pipes/', array('target' => '_new')) ,
      '#required' => FALSE,
      '#default_value' => variable_get('ba_isnare_rss_feed', ''),
  );
  $form['bulk_article_sources']['isnare']['ba_isnare_pages_to_que'] = array(
      '#type' => 'textarea',
      '#title' => t('Add iSnare Article URLs to Queue'),
      '#description' =>  t('URLs to manually add to the Queue'),
      '#required' => FALSE,
      '#default_value' => '',
      '#cols'  => 100,
      '#rows'  => 3,
  );


 $form['bulk_article_ads']  = array(
    '#type'         => 'fieldset',
    '#title'        => t('Advertisement Options'),
    '#collapsible'  => TRUE,
    '#collapsed'    => TRUE,
  );
  
  
  $form['bulk_article_ads']['adsense']['ba_adsense_pubids'] = array(
      '#type' => 'textarea',
      '#title' => t('Adsense Publisher IDs'),
      '#description' =>  t('Rotate between these IDs (with semicolon appended weight if desired)'),
      '#required' => FALSE,
      '#default_value' => variable_get('ba_adsense_pubids', 'pub-6897500374933582'),
      '#cols'  => 30,
      '#rows'  => 3,
  );

 $form['bulk_article_protect']  = array(
    '#type'         => 'fieldset',
    '#title'        => t('Protxt Text Protection options'),
    '#description' =>  t('Protxt randomly modifies article text to prevent content theft then fixes the text in a JavaScript call before the visitor notices.'),
    '#collapsible'  => TRUE,
    '#collapsed'    => TRUE,
  );
 $form['bulk_article_protect']['ba_juggle_sentences'] = array(
      '#type' => 'checkbox',
      '#title' => t('Randomly shuffle each paragraph\'s sentences (reccomended)'),
      '#required' => FALSE,
      '#default_value' => variable_get('ba_juggle_sentences', TRUE), 
  );
 $form['bulk_article_protect']['ba_juggle_phrases'] = array(
      '#type' => 'checkbox',
      '#title' => t('Randomly shuffle each sentence\'s phrases'),
      '#required' => FALSE,
      '#default_value' => variable_get('ba_juggle_phrases', FALSE),
      '#disabled' => TRUE,
  );
 $form['bulk_article_protect']['ba_synomize'] = array(
      '#type' => 'checkbox',
      '#title' => t('Randomly replace synonyms in each sentence (controversial: modifies page text if not meaning)'), 
      '#required' => FALSE,
      '#default_value' => variable_get('ba_synomize', FALSE),
      '#disabled' => TRUE,
  );

/**/

  
  return system_settings_form($form);
}
/*
 * In the validator we'll add any urls and reject any that are already in the system
 */
function ba_admin_settings_form_validate($form, &$form_state) { 

 // clean up list of ArticleBase Topics
 $topics =  $form_state['values']['ba_articlebase_topics'];
 $topics = str_replace(',', "\n", $topics);
 $topics = array_filter(array_unique(explode("\n", $topics)));  
 foreach ($topics as $key => $topic) $topics[$key] = check_plain(trim($topic));
 $topics = array_filter($topics); 
 $form_state['values']['ba_articlebase_topics'] = implode("\n", $topics);;
  
  
 /*
 $list = array_filter(array_unique(explode("\n", $form['#post']['ba_pages'])));  
 foreach ($list as $key=>$val) $list[$key] = trim($val); 
 $list = array_filter($list);
  
 if (count($list)) drupal_set_message('Processing urls: <pre>'.print_r($list, true)."</pre>");  
 
 $que = variable_get('bulk_article_que', array());
 $list = array_merge($list, $que);
 
 $list = array_filter(array_unique($list));  
 variable_set('bulk_article_que', $list);
 
 _ba_process_article_que();
*/
}

/*
 * Implementation of hook_form().
 *
 * Now it's time to describe the form for collecting the information
 * specific to this node type. This hook requires us to return an array with
 * a sub array containing information for each element in the form.
 */
function ba_form(&$node) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we can use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  $form['bulk_article']  = array(
    '#type'         => 'fieldset',
    '#title'        => t('Bulk Article Properties'),
    '#description'  => 'Source: '. check_plain($node->url)
  );
  $form['bulk_article']['category'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#default_value' => isset($node->category) ? $node->category : '',
  );
  $form['bulk_article']['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Keywords'),
    '#default_value' => isset($node->keywords) ? $node->keywords : '',
  );
  $form['bulk_article']['writer'] = array(
    '#type' => 'textfield',
    '#title' => t('Article Writer'),
    '#default_value' => isset($node->writer) ? $node->writer : '',
  );
 $form['bulk_article']['aid'] = array(
    '#type' => 'textfield',
    '#title' => t('AID'),
    '#default_value' => isset($node->aid) ? $node->aid : '', 
  ); 
 // category, keywords, writer, aid
  return $form;
}
/*
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function ba_validate(&$node) {
  if ($node->quantity) {
    //if (!is_numeric($node->quantity)) {
      //form_set_error('quantity', t('The quantity must be a number.'));
    //}
  }
  else {
    // Let an empty field mean "zero."
   // $node->quantity = 0;
  }
}

/*
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function ba_insert($node) {
 // add a new node record
 // we'll need the following fields
 // uuid,fingerprint,url,pubstate,editor_score,category,keyword,source,
 // owner_uuid,writer,editor
 // $node->uuid = _ba_uuid($node); // new uuid if none found
 // $node->fingerprint = _ba_fingerprint($node); // generates a new fingerprint 
 
 db_query("INSERT INTO {bulk_article} (nid, category, keywords, writer, aid, url, pub_date) ".
  " VALUES (%d, '%s', '%s', '%s', '%s', '%s', %d)",
  $node->nid, 
  $node->category, $node->keywords, $node->writer, $node->aid, $node->url, $node->pub_date);
  //_ba_add_keyword($node, $node->keywords);

  $vid =  _ba_get_vid();
}

/*
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function ba_update($node) {
  // generate new fingerprint
  //$node->fingerprint = _ba_fingerprint($node);
  // category, keywords, writer, aid, url, pub_date
  $now = time();
  $vid =  _ba_get_vid();
  
   // HA!! node is being published if node->pub_date = 0 and node->status = 1
  if ($node->status && !$node->pub_date){
   $node->pub_date = time(); 
  }
  
  $vid = _ba_get_vid();
  $node->keywords = _ba_clean_keywords($node->keywords);
  $node->taxonomy = array('tags' => array($vid => $node->keywords)); // url='%s', 
  db_query("UPDATE {bulk_article} SET category='%s', keywords='%s', writer='%s', aid='%s', pub_date = %d 
   WHERE nid = %d",
   $node->category, $node->keywords, $node->writer, $node->aid, $node->pub_date,
   $node->nid); // $node->url, 
}

/*
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from out table.
 */
function ba_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {bulk_article} WHERE nid = %d', $node->nid);
}

/*
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * ev
  ery time a node is loaded, and allows us to do some loading of our own.
 */
function ba_load($node) {
  // category, keywords, writer, aid, url, pub_date
  $additions = db_fetch_object(db_query('SELECT category, keywords, writer, aid, url, pub_date
   FROM {bulk_article} WHERE nid = %d', $node->nid));
  return $additions;
}

/*
 * Implementation of hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function ba_theme() {
  return array(
    'ba_order_info' => array(
      'arguments' => array('node'),
    ),
  );
}

 
/*
 * Pulls down search pages on articlebase.com and harvests out article URLs
 * TODO: add "subjects" box to settings and first do a search on articlebase, pulling out matching tags
 *  then do this process with those tags
 * perhaps have a custom process for each article site we are tapping
 */
function ba_get_article_urls_batch() {
  $page_urls = array(); variable_get('bulk_articlebase_topic_urls', array());
  if (!count($page_urls)) {
    $list = explode("\n", variable_get('ba_articlebase_topics', ''));
    $pages = array(1, 16, 31, 46, 61, 76, 91, 106, 121, 136);
    foreach ($list as $topic) foreach ($pages as $page) $page_urls[] = "http://www.articlesbase.com/article-tags/{$topic}/{$page}";
    variable_set('bulk_articlebase_topic_urls', $page_urls); 
  }
  $batch = array(
    'operations' => array(),
    'finished' => '', // 'bulk_articlebase_articles_batch_finished', // this just generates the finished message
    'title' => t('Que New Bulk Articles'),
    'init_message' => t('Starting Article Que Building.'),
     // 'progress_message' => t('Processed @current page listings out of @total.'),
    'progress_message' => 'Fetching new ArticleBase URLs into Que', 
    'error_message' => t('Bulk Article Que Batch has encountered an error.'),
  );
  $batch['operations'][] = array('ba_fetch_articlebase_urls_batch_process', array());
  batch_set($batch);
  batch_process('admin/settings/ba');  
}
function ba_fetch_articlebase_urls_batch_process($context) {
 $list = variable_get('bulk_articlebase_topic_urls', array());

 if (count($list)===0) {
  drupal_set_message("Process done. List count is 0!");
  $context['finished'] = 1; // does this end the batch??
  return TRUE;
 }

 // set up initial context
 if (!isset($context['sandbox']['progress'])) {
  $context['sandbox']['progress'] = 0;
  $context['sandbox']['max'] = count($list);
  //  $context['sandbox']['max'] = 5;
 }

 // take one off the list of listing pages
 $url = array_shift($list); // pulls the first item off the list
 variable_set('bulk_articlebase_topic_urls', array_filter($list));
 $context['sandbox']['progress']++;

 // fetch new urls from listing page
 $new_urls = _ba_fetch_articlebase_new_urls($url);  

 // save to url que
 if (count($new_urls)>0) {
  $que = variable_get('bulk_article_que', array());   
  variable_set('bulk_article_que', array_filter(array_merge($new_urls, $que)));
  $context['sandbox']['new_urls'] += count($new_urls);
 } 
 $context['message'] = t('Adding URLs from page %progress of %max. Found %new new Article URLs.',
  array('%progress'   => $context['sandbox']['progress'],
        '%max'        => $context['sandbox']['max'],
        '%new'        => $context['sandbox']['new_urls'])
 );

 // Inform the batch engine that we are not finished,
 // and provide an estimation of the completion level we reached.
 if ($context['sandbox']['progress'] && $context['sandbox']['max']) {
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  //$context['finished'] = 1;
 }
}



/*
 * Batch Process to actually process the Que and fetch the articles
 */
function ba_process_que_batch() {
  $batch = array(
    'operations' => array(),
    'finished' => '', // 'bulk_articlebase_articles_batch_finished', // this just generates the finished message
    'title' => t('Process Article Que'),
    'init_message' => t('Starting Article Que Building.'),
     // 'progress_message' => t('Processed @current page listings out of @total.'),
    'progress_message' => 'Fetching new ArticleBase Articles',
    'error_message' => t('Bulk Article Que Process has encountered an error.'),
  );
  $batch['operations'][] = array('ba_process_que_batch_process', array());
  batch_set($batch);
  batch_process('admin/settings/ba');
}
function ba_process_que_batch_process($context) {
 $MAX_ARTICLES = 5; // no more than this many per batch
 $que = variable_get('bulk_article_que', array()); 

 if (count($que)===0) {
  drupal_set_message('Que found to be empty, exiting batch process', 'warning');
  $context['finished'] = 1; // does this end the batch??
  return TRUE;
 }

 // set up initial context
 if (!isset($context['sandbox']['progress'])) {
  $context['sandbox']['progress'] = 0;
  $context['sandbox']['max'] = (count($que) > $MAX_ARTICLES) ? $MAX_ARTICLES : count($que);
 }

 // take one off the que
 $url = array_shift($que); // pulls the first item off the list 
 variable_set('bulk_article_que', array_filter($que));
 $context['sandbox']['progress']++;

 // fetch new article
 if (_ba_import_article($url)) $context['sandbox']['new']++;


 // Inform the batch engine that we are not finished,
 // and provide an estimation of the completion level we reached.
 if ($context['sandbox']['progress'] && $context['sandbox']['max']) {
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
 }

 // provide feedback message
 $context['message'] = t('Adding new articles %progress of %max. Added %new new Articles.',
   array('%progress'   => $context['sandbox']['progress'],
         '%max'        => $context['sandbox']['max'],
         '%new'        => $context['sandbox']['new'])
 );
 drupal_set_message($context['message'] .' - '. $context['finished']);


}

/*
 * Provides juggle and adsense and filters (is this a good idea?)
 */
function ba_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(
        0 => t('Adsense Injector'), 
        1 => t('Nofollow Links'),    
      );
    case 'description':
      return t('Inserts Adsense Ad 1/3 into body text between paragraphs');
    case 'process': 
      //global $node;
      switch ($delta) {
       case 0: return _ba_filter_adsense_injector($text); 
       case 2: return _ba_filter_nofollow_links($text);       
      }
    default:  
      return $text;
  }
}

/*
 * Inserts Adsense ad into text body (1/3 in approx)
 * Todo: move this to another module as a filter
 * Todo: insert JS code to rotate id and channel after pageload
 */
function _ba_filter_adsense_injector($text) {
 $ad = _ba_adsense_ad('468x60', '', 'F9FBFB', '', 'ar_adsense'); // ($size, $pub_id='', $bgcolor='', $channel='', $class='')
 $ad_pos = strpos($text, '<p', strlen($text) / 4) -1;
 //strpos($node->body, '<p', strpos($node->body, '<p', 0)+4);
 return substr_replace($text, $ad, $ad_pos, 0);
}
/*
 * Generate code for an adsense ad
 *
 */
function _ba_adsense_ad($size, $pub_id='', $bgcolor='', $channel='', $class='') {
 $pub_id = $pub_id ? $pub_id : variable_get('ba_default_pubid', 'pub-6897500374933582');
 $channel = $channel ? $channel : variable_get('ba_default_channel', '115458225');
 $bgcolor = $bgcolor ? $bgcolor : variable_get('ba_default_bgcolor', 'FFFFFF');
 list($width, $height) = explode('x', $size);
 $ad = <<<EOD
<div class="google_inline_ad {$class}">
 <div class="content">
  <script type="text/javascript"><!--
    google_ad_client = "{$pub_id}";
    google_ad_width = {$width};
    google_ad_height = {$height};
    google_ad_format = "{$width}x{$height}_as";
    google_ad_type = "text";
    google_ad_channel = "{$channel}";
    google_color_border = "{$bgcolor}";
    google_color_bg = "{$bgcolor}";
    google_color_link = "0000AA";
    google_color_text = "666666";
    google_color_url = "{$bgcolor}";
  //-->
  </script>
  <script type="text/javascript"
    src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
 </div>
</div>
EOD;
 return $ad;
}



/*
 * Adds nofollow to all links
 */
function _ba_filter_nofollow_links($text) {
 return preg_replace('/<a([^>]+)>/i', '<a\1 rel="nofollow">', $text);
}
function _ba_nofollow_links($str) {
   return preg_replace('/<a([^>]+)>/i', '<a\1 rel="nofollow">', $str);
 }

/*
 * Cleans up a comma delimited keyword list
 */
function _ba_clean_keywords($keywords) {
 $list = explode(",", $keywords);
 foreach ($list as $key => $val) $list[$key] = strtolower(trim($val));
 $list = array_filter(array_unique($list));
 return implode(',', $list);
} 

/*
 *  Call this from Cron to pull down new articles
 *  TODO: implement
 */
function _ba_check_rss() {
/*
 // exit if notified last 24 hours
 $last = variable_get('ba_promote_last_message', strtotime("-1 month"));
 //drupal_set_message("Last (". date('F j, Y, g:i a',$last) .") comparator: (".date('F j, Y, g:i a',strtotime("-1 day")).")");
 if ($last < strtotime("-1 day")) {
  $count = count(_ba_unpromoted_articles());
  if ($count){
   // send notification
   global $base_url;
   $to = variable_get('site_mail','');
   $subject = "New articles to promote at {$base_url}";
   $body = "Hi,\n\nHow are you? Please take some time to promote {$count} new articles: \n\n    ".
    $base_url .'/admin/settings/article/promotion_que' ."\n\n Last notification: ". date('F j, Y, g:i a', $last);
   mail($to, $subject, $body);;
  }
  // save notify date
  variable_set('ba_promote_last_message', strtotime("now"));
 }
 */
}

function _ba_process_article_que() {
  // only process once in 5 minutes
  if (variable_get('ba_last_added_article', strtotime('-10 minute')) > strtotime('-5 minute')) return;
  $proccessed = 0;
  $que = variable_get('bulk_article_que', array());
  foreach ($que as $url) {
   if (($aid = _bulk_article_aid($url)) && !_bulk_article_exists($aid)) $list[] = $url;
  }
  // import all local files
  foreach ($list as $url) {
   if (_bulk_article_file_exists($url)) {
     _ba_import_article($url);
     $file_imports++;
   }
   else $newque[] = $url;
  }
  // import up to five remaining
  foreach ($newque as $key => $url) {
    if (_ba_import_article($url)) $imported++;
    unset($newque[$key]);
    if ($imported>3) continue;
  }
  drupal_set_message("<b>Imported {$file_imports} from file cache, ". count($imported) . " from remote URLs. ". count($newque) ." remote URLs remain.</b>");
  $que = array_filter($newque);
  variable_set('ba_last_added_article', time());
  variable_set('bulk_article_que', $que);
}

function _ba_format_article_body($ar) {
  $ar['body'] = str_replace(array("\n", "\r", "\t", "  ", "\o", "\xOB"), ' ', $ar['body']);
  $ar['body'] = strip_tags($ar['body'], '<p><li><ul><ol><span><h2><h3><br>');
  $ar['body'] = _filter_htmlcorrector($ar['body']);   
  //$result .= " <h2 class='article_heading'>{$ar['title']}</h2>";
  // $result .= " <h4 class='article_author'>contributed by {$ar['writer']} on <i>".date("l, F j, Y.", strtotime($ar['pubdate'])) ."</i></h4>";
  // if ($ar['keywords']) $result .= " <p class='article_keywords'>keywords: {$ar['keywords']}</p>";
  // if ($ar['category']) $result .= " <p class='article_category'>category: {$ar['category']}</p>";
  $result .= " <div class='article_body'>{$ar['body']}</div>\n\n";
  $result .= " <div class='article_bio'>{$ar['bio']}</div>";
  $result = "<div id='article_main'>\n{$result}\n</div>";
  return $result;
 }

function _ba_files_dir() {
   $dir = file_directory_path() .'/bulk_articles';
   if (!file_exists($dir)) {
     mkdir($dir, 0766, TRUE); chmod($dir, 0766);
   }
   $dir .= '/articles';
   if (!file_exists($dir)) {
     mkdir($dir, 0766, TRUE); chmod($dir, 0766);
   }
   $cache = $dir .'/cache';
   if (!file_exists($cache)) {
     mkdir($cache, 0766, TRUE); chmod($dir, 0766);
   }
   return $dir;
 }

function _bulk_article_aid($url) {
   if (strpos($url, 'articlesbase.com')) {
    list($aid) = explode('.', end(explode('-', $url)));
   }
   else {
    list($aid) = explode('&', substr($url, strpos($url, '?aid=')+5));
   }
   return (int) $aid;
 }

function _bulk_article_file_exists($url) {
  $aid = _bulk_article_aid($url);
  $local_file = _ba_files_dir() ."/{$aid}.html";
  return file_exists($local_file);
 }

 /*
 * search for an article with a closely matching key
 */
function _bulk_article_exists($aid) {
 //drupal_set_message("Checking if ba article exists: aid: {$aid}");
 return (bool) db_result(db_query("SELECT nid FROM {bulk_article} WHERE aid='%s'", $aid));
}

function _ba_strip_msword_utf8($text) {
  $find[] = 'â€œ';  // left side double smart quote
  $find[] = 'â€'. chr(157);  // right side double smart quote
  $find[] = 'â€˜';  // left side single smart quote
  $find[] = 'â€™';  // right side single smart quote
  $find[] = 'â€¦';  // elipsis
  $find[] = 'â€”';  // em dash
  $find[] = 'â€“';  // en dash

  $replace[] = '"';
  $replace[] = '"';
  $replace[] = "'";
  $replace[] = "'";
  $replace[] = "...";
  $replace[] = "-";
  $replace[] = "-";

  $text = str_replace($find, $replace, $text);
 return $text;  
}

function _ba_import_article($url) {
  if (!($aid = _bulk_article_aid($url))) return;
  if (_bulk_article_exists($aid)) return;
  if ($ar = _ba_extract_article($url)) {

   //drupal_set_message("<pre>". print_r($ar, true). "</pre>");

   $node = _ba_create_new_node();
   $node->created = strtotime($ar['pubdate']);

   // title
   $node->title = $ar['title'];

   // meta tags
   $node->description = $ar['description'];
   $node->keywords = $ar['keywords'];
   $node->category = $ar['category'];
   $node->url = $ar['url'];
   // writer - create user account?
   $node->writer = ucwords(strtolower($ar['writer']));
   $node->aid = $ar['aid'];
   $node->body = _ba_format_article_body($ar);

   _ba_save($node);
   // drupal_set_message("ba article added:  {$node->path}");
   return TRUE;
  }
 } 

function _ba_extract_article($url) {
  if (strpos($url, 'articlesbase.com')) return _ba_extract_articlebase_article($url);
   else return _ba_extract_isnare_article($url);
 }

function _ba_extract_isnare_article($url) { 
  $ar['aid'] = _bulk_article_aid($url); 
  $ar['url'] = $url; 

  if (!$ar['aid']) {
    drupal_set_message("Got no aid from this URL: \n $url", 'warning');
    return FALSE;
  }
  else {
    drupal_set_message("extract_bulk_article: {$ar['aid']} ");
  }

  // check to see if article is cached locally first
  $local_file = _ba_files_dir() ."/{$ar['aid']}.html";
  if (!file_exists($local_file)) {
   sleep(3);
   if (!($html = file_get_contents($url))) {
    drupal_set_message("Could not load article from URL: $url");
    return FALSE;
   }
   file_put_contents($local_file, $html);
   drupal_set_message("Saved ba article to files folder for future reference: \n $local_file");
  }
  else {
    drupal_set_message("Loading ba article from files folder: \n $local_file");
  }

  if (!file_exists($local_file)) {
   drupal_set_message("Warning, unable to save local file for some reason! \n $local_file");
   return FALSE;
  }


  include_once(drupal_get_path('module', 'ba') .'/simplehtmldom/simple_html_dom.php');
   // grab keywords and desc from meta
  $tags = get_meta_tags($local_file);
  $clean_keywords = _ba_clean_keywords($tags['keywords']);
  $ar['keywords'] = $clean_keywords;
  $ar['vid'] = _ba_get_vid();

  $desc = $tags['description'];
   $desc = str_replace('Title: ', "", $desc);
   $desc = str_replace(', Category: ', "\n", $desc);
   $desc = str_replace(', Author: ', "\n", $desc);
   $desc = str_replace(', PubDate: ', "\n", $desc);
  list($ar['title'], $ar['category'], $ar['writer'], $ar['pubdate']) = explode("\n", $desc);

  // Create DOM from URL or file
  $html = file_get_html($local_file);

  // Find article
  $article = $html->getElementById("articlebody")->innertext;
  $ar['bio'] = $html->getElementById("authorbio")->innertext;




  // remove top bio section
  $html->load($article);
  foreach ($html->find("p") as $par) $pars[]=$par;
  $ar['body'] = implode("\n\n", $pars);  
  
  // clean up ms-word utf8 characters at the sources
  $ar['title'] = _ba_strip_msword_utf8($ar['title']);
  $ar['body'] = _ba_strip_msword_utf8($ar['body']);
  $ar['description'] = _ba_strip_msword_utf8($ar['description']);
  
  $ar['pub_date'] = 0;
  
  return $ar;
 }

function _ba_extract_articlebase_article($url) {
  drupal_set_message('Trying to load article from articlebase');

  // $url = "http://www.articlesbase.com/computers-articles/keep-your-computer-data-backup-files-in-a-secure-location-193758.html";

  $ar['url'] = $url;
  list($ar['aid']) = explode('.', end(explode('-', $url)));
  list(,,,$ar['category']) = explode('/', $url);
  $ar['category'] = str_replace('-', ' ', $ar['category']);
  $ar['category'] = trim(str_replace(' articles', '', $ar['category']));

  if (!is_numeric($ar['aid'])) {
    drupal_set_message("Got no articlebase aid (just '{$ar['aid']}') from this URL: \n $url", 'warning');
    return FALSE;
  }
  else {
    drupal_set_message("extract_articlebase_article: {$ar['aid']} ");
  }

  // check to see if article is cached locally first
  $local_file = _ba_files_dir() ."/{$ar['aid']}.html";
  if (!file_exists($local_file)) {
   drupal_set_message("No article cached: $local_file <br>   loading from url: $url");
  
   sleep(3);
   if (!($html = file_get_contents($url))) {
    drupal_set_message("Could not load article from URL: $url");
    return FALSE;
   }
   file_put_contents($local_file, $html);
   drupal_set_message("Saved ba article to files folder for future reference: \n $local_file");
  }
  else {
    drupal_set_message("Loading ba article from files folder: \n $local_file");
  }

  if (!file_exists($local_file)) {
   drupal_set_message("Warning, unable to save local file for some reason! \n $local_file");
   return FALSE;
  }

  include_once(drupal_get_path('module', 'ba') .'/simplehtmldom/simple_html_dom.php');


   // grab keywords and desc from meta
  $tags = get_meta_tags($local_file);
  $clean_keywords = _ba_clean_keywords($tags['keywords']);
  $ar['keywords'] = $clean_keywords;
  $ar['vid'] = _ba_get_vid();
  $ar['description'] = $tags['description'];
  $html = file_get_html($local_file);
  
  
  
 // extracting the date is a little trickier -- cancel this - we're now using pub_date to store publication date
 /*
   if($date = $html->find("div.post-date", 0)->innertext) {
    $date = strip_tags($date); //  Posted: Aug 4th, 2007 | Comments: ...
    list(,$date) = explode(': ', $date);
    list($date) = explode(' |', $date);
    //$ar['pub_date'] = $date;
   }
  */
  


  $article = $html->getElementById("texttocopy")->innertext;
  $html->load($article);


  $ar['title'] = $html->find('h1', 0)->innertext;
  $ar['writer'] = $html->find("a", 0)->innertext;
   

  $bio = substr($article, strpos($article, '<strong>About the Author:')+strlen('<strong>About the Author:'), strlen($article));
  $bio = substr($bio, 0, strpos($bio, '<p>Article Source:'));
  $bio = substr($bio, strpos($bio, '<br />')+strlen('<br />'), strlen($bio));
  $bio = str_replace("<p>", "", $bio); $bio = str_replace("</p>", "", $bio); $bio = str_replace("<p />", "", $bio);
  $bio = str_replace("<br />", "", $bio);
  $bio = str_replace("\n", " ", $bio); $bio = str_replace("\r", " ", $bio); $bio = str_replace("  ", " ", $bio);
  $ar['bio'] = trim($bio); //$html->find("strong",0)->innertext;

  $article = substr($article, strpos($article, '<p>'), strlen($article));
  $article = substr($article, 0, strpos($article, '<strong>About the Author:'));
  $article = str_replace("\n<br />", "\n\n<p>", $article);
  $article = str_replace("<br />", "</p>", $article);
  $article = str_replace("\n", " ", $article); $article = str_replace("\r", " ", $article);
  $article = str_replace(" </p>", "</p>", $article);
  $article = str_replace("</p>", "</p>\n\n<p>", $article); $article = str_replace("<p><p>", "<p>", $article);
  $article = str_replace("•", "<p>•", $article); $article = str_replace("<p><p>•", "<p>•", $article);
  $article = str_replace("“", '"', $article); $article = str_replace("”", '"', $article);

 // $article = _ba_nofollow_links($article);

  $html->load($article);

  foreach ($html->find("p") as $par) {
    if (strpos($par, '•')) {
      $par = str_replace('p>', 'li>', $par);
      $par = str_replace('•', '', $par);
    }
    elseif (strlen($par)<80) $par = str_replace('p>', 'h3>', $par);
    $par = _ba_nofollow_links($par);
    if (strlen(trim(strip_tags($par)))>5) $pars[] = $par;
  }

  $pars = implode("\n\n", $pars);
  $ar['body'] = $pars;

  // clean up ms-word utf8 characters at the sources
  $ar['title'] = _ba_strip_msword_utf8($ar['title']);
  $ar['body'] = _ba_strip_msword_utf8($ar['body']);
  $ar['description'] = _ba_strip_msword_utf8($ar['description']);
  
  $ar['pub_date'] = 0;

  return $ar;
 }

function _ba_fetch_articlebase_new_urls($listing_page) {

  // parse articlebase listing page and return array of article urls
  $urls = array();

  // cache locally so we minimize the task
  $local_file = _ba_files_dir() ."/cache/". md5($listing_page) .".html";
  if (!file_exists($local_file) || (filemtime($local_file) < strtotime("-1 week"))) {
   sleep(3);
   if (!($html = file_get_contents($listing_page))) {
    drupal_set_message("Could not load article from URL: $listing_page", 'warning');
    return $urls;
   }
   file_put_contents($local_file, $html);
   // drupal_set_message("Cached AB listing page for future reference: $local_file");
  }
  else {
   // drupal_set_message("Loading AB listing page from cache: $local_file");
  }
  if (!file_exists($local_file)) {
   drupal_set_message("Warning, unable to cache listing page for some reason! $local_file", 'warning');
   return $urls;
  }

  // now parse this page
  include_once(drupal_get_path('module', 'ba') .'/simplehtmldom/simple_html_dom.php');
  $html = file_get_html($local_file);
  foreach ($html->find("div.content-summary_nr") as $link) $urls[] = 'http://www.articlesbase.com'. $link->find('a', 0)->href;

  // remove URLs that are already in the system
  $article_count = count($urls);
  foreach ($urls as $key => $url) {
   $aid = _bulk_article_aid($url);
   if (_bulk_article_exists($aid)) unset($urls[$key]);
  }
  // remove URLS that are already in the que
  $que = variable_get('bulk_article_que', array());
  foreach ($urls as $key => $url) {
   if (in_array($url, $que)) unset($urls[$key]);
  }
  $result = array_filter($urls);
  $new_article_count = count($result);
  //drupal_set_message("_ba_fetch_articlebase_new_urls fetched {$article_count} articles, {$new_article_count} were new.");
  return $result;
}


/*
 * Article CRUD API
 *
 * Usage:
 *  $article = _ba_create_new_node();
 *  // load article fields
 *  $article->created = strtotime("+{$x} day");
 *  $article->path = $whatever;
 *  _ba_save($article);
 *
 */
function _ba_create_new_node() {
 $node = new stdClass();
 $node->comment = 2;
 $node->promote = 1;
 $node->format = 2;
 $node->uid = 1;
 $node->status = 0;
 $node->type = 'ba';
 $node->aid='';
 return $node;
}

/*
 * Save new node, create write account if none exists
 */
function _ba_save($node) {
 $uid = _ba_writer_uid($node);
 if (!$node->publish_on) $node->publish_on = $node->created;
 if ($node = node_submit($node)) {
  node_save($node); // modifies node passed by ref
  ba_update($node);
  // force uid on node
  db_query("UPDATE {node} SET uid=%d WHERE nid=%d", $uid, $node->nid);
 }
}

/*
 * Get Uid from node, create write account and role if necessary
 */
function _ba_writer_uid($node) {
 $short_name = strtolower(str_replace(' ', '_', $node->writer));
 if (!($uid = db_result(db_query("SELECT uid FROM {users} WHERE name='%s'", $node->writer)))) {
   // otherwise, create a new writer account
   $email = $short_name .'@nomail.info';
   $data = array('name' => $node->writer,
                 'pass' =>  user_password(8),
                 'status' =>  1,
                 'mail' => $email,
                 'init' => $email,
                 'roles' => array('writer'),
   );

   // set up article author
   $user = new stdClass();
   $user = user_save($user, $data);
   _ba_assign_userrole($user, 'writer');
   // add to user profile
   $fields = array('profile_name' => $node->writer);
   profile_save_profile($fields, $user, 'Personal Info');
   $uid = $user->uid;
 }
 //drupal_set_message("_ba_writer_uid for {$node->writer}: $uid");
 return $uid;
}

/*
 * Add Role to user
 */
function _ba_assign_userrole($user, $role) {
 $rid = _ba_get_roleid($role);
 $userid = $user->uid;
 db_query("INSERT INTO {users_roles} (rid, uid) VALUES ('%d','%d')", $rid, $userid);
}

/*
 * Return uid of article owner, create new 'owner' role and user account if not exists *
 */
function _ba_owner_uid($owner_name) {
 $short_name = strtolower(str_replace(' ', '_', $owner_name));
 if ($uid = db_result(db_query("SELECT uid FROM {users} WHERE name='%s'", $owner_name))) return $uid;
 // otherwise, create a new writer account
 $email = $short_name .'@no_email.info';
 $data = array('name' => $owner_name,
               'pass' =>  user_password(8),
               'status' =>  1,
               'mail' => $email,
               'init' => $email,
               'roles' => array('content owner'),
 );
 // set up article owner
 $user = new stdClass();
 $user = user_save($user, $data);
 // add to user profile
 $fields = array('profile_name' => $owner_name);
 profile_save_profile($fields, $user, 'Personal Info');
 return $user->uid;
}

/*
 * Get id for role, create role if it does not exist
 * Todo: move the creation of role into a feature?
 * Todo: choose role in configuration
 */
function _ba_get_roleid($role) {
 $rid = db_result(db_query("SELECT rid FROM {role} WHERE name='%s'", $role));
 if (!$rid) {
  db_query("INSERT INTO {role} (name) VALUES ('%s')", $role);
  $rid = db_result(db_query("SELECT rid FROM {role} WHERE name='%s'", $role));
 }
 return $rid;
}

/*
 * Returns or cretes vocabulary for ba article keywords
 *
 * TODO: set default path, set default taxonomy path redirect
 *   set default to type "tags"
 */
function _ba_get_vid($vocab = 'bulk article keywords') {
 // $vid = variable_get('ba_kw_vocabulary', '');
  if (empty($vid) || is_null(taxonomy_vocabulary_load($vid))) {
    // check to see if an ba keyword vocabulary exists
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module='ba'"));
    if (!$vid) {
      $vocabulary = array(
        'name' => t($vocab),
        'multiple' => '0',
        'required' => '0',
        'hierarchy' => '1',
        'relations' => '0',
        'module' => 'ba',
        'nodes' => array('ba' => 1),
      );

   drupal_set_message("Created new vocabulary: $vocab");

      taxonomy_save_vocabulary($vocabulary);
      $vid = $vocabulary['vid'];
    }
    variable_set('ba_kw_vocabulary', $vid);
  }
  return $vid;
}

function _ba_process_que_cron() {
 $MAX_TIME = 5; // max seconds run time
 $que = variable_get('bulk_article_que', array()); 
 $start = time(); 

 if (count($que)===0) return;   
  while ($elapsed < $MAX_TIME) {
  // take one off the que
  $url = array_shift($que); // pulls the first item off the list 
  variable_set('bulk_article_que', array_filter($que)); 
 
  // fetch new article
  if (_ba_import_article($url)) { 
   $new++;
   $list .= "  $url \n";
  }
  $elapsed = time() - $start; 
 }  
 
 $message = "Imported {$new} bulk article(s): \n {$list}"; 
 watchdog('bulk articles', $message);
}



